import os
import logging
from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes, 
    ConversationHandler
)

# Set up logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==== CONFIGURATION ====
# Get the token from environment variable with fallback to hardcoded value
BOT_TOKEN = os.getenv("BOT_TOKEN", "7331886812:AAGBtC0OqSQhZy2Z0gQnNTeHRJZRf6i5Y9I")
# Get the admin ID from environment variable with fallback to hardcoded value
ADMIN_ID = int(os.getenv("ADMIN_ID", "1345239767"))

# ==== CONVERSATION STATES ====
CONSULT_NAME, CONSULT_PHONE = range(2)
BUY_NAME, BUY_PHONE, BUY_AREA, BUY_REGION, BUY_BUDGET = range(2, 7)
CALC_AREA, CALC_ROOMS, CALC_LOCATION = range(7, 10)

# ==== KEYBOARD MENUS ====
main_menu = ReplyKeyboardMarkup([
    ["üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é"],
    ["üè° –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–¥–±–∞–Ω–Ω—è –¢–∞—É–Ω—Ö–∞—É—Å–∞"],
    ["üì¶ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—é"],
    ["üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü—ñ–Ω–∏", "‚ùì –ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è"],
    ["üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", "‚ÑπÔ∏è –ü—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é"]
], resize_keyboard=True)

# FAQ options menu
faq_menu = ReplyKeyboardMarkup([
    ["–ü—Ä–æ—Ü–µ—Å –ø–æ–∫—É–ø–∫–∏", "–£–º–æ–≤–∏ –æ–ø–ª–∞—Ç–∏"],
    ["–î–æ–∫—É–º–µ–Ω—Ç–∏", "–¢–µ—Ä–º—ñ–Ω–∏ –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞"],
    ["–Ü–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é"]
], resize_keyboard=True)

# ==== COMMAND HANDLERS ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /start command - sends welcome message with main menu"""
    user = update.effective_user
    logger.info(f"User {user.id} started the bot")
    
    await update.message.reply_text(
        f"–í—ñ—Ç–∞—é, {user.first_name}! –Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω—ñ—ó –∑ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –≤ –û–¥–µ—Å—ñ üè°\n\n–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=main_menu
    )

# ==== CONSULTATION REQUEST HANDLERS ====
async def consult_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Initiates consultation request conversation"""
    logger.info(f"User {update.effective_user.id} started consultation request")
    
    await update.message.reply_text("–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
    return CONSULT_NAME 

async def consult_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles consultation name input"""
    context.user_data["name"] = update.message.text
    logger.info(f"Got name for consultation: {context.user_data['name']}")
    
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return CONSULT_PHONE

async def consult_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles consultation phone input and completes consultation request"""
    context.user_data["phone"] = update.message.text
    logger.info(f"Got phone for consultation: {context.user_data['phone']}")
    
    await update.message.reply_text(
        "–î—è–∫—É—î–º–æ! –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ. –ú–∏ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—å üìû", 
        reply_markup=main_menu
    )

    # Prepare and send message to admin
    msg = (
        "üì• –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é:\n"
        f"üë§ –Ü–º'—è: {context.user_data['name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}"
    )
    
    try:
        await context.bot.send_message(chat_id=ADMIN_ID, text=msg)
        logger.info(f"Sent consultation request to admin {ADMIN_ID}")
    except Exception as e:
        logger.error(f"Failed to send message to admin: {e}")
    
    return ConversationHandler.END

# ==== TOWNHOUSE PURCHASE REQUEST HANDLERS ====
async def buy_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Initiates townhouse purchase request conversation"""
    logger.info(f"User {update.effective_user.id} started townhouse purchase request")
    
    await update.message.reply_text("–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
    return BUY_NAME

async def buy_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles purchase name input"""
    context.user_data["name"] = update.message.text
    logger.info(f"Got name for purchase: {context.user_data['name']}")
    
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return BUY_PHONE

async def buy_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles purchase phone input"""
    context.user_data["phone"] = update.message.text
    logger.info(f"Got phone for purchase: {context.user_data['phone']}")
    
    await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –±–∞–∂–∞–Ω—É –ø–ª–æ—â—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 80-120 –º¬≤):")
    return BUY_AREA

async def buy_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles purchase area input"""
    context.user_data["area"] = update.message.text
    logger.info(f"Got area for purchase: {context.user_data['area']}")
    
    await update.message.reply_text("–í —è–∫–æ–º—É —Ä–∞–π–æ–Ω—ñ –û–¥–µ—Å–∏ –±–∞–∂–∞—î—Ç–µ –∂–∏—Ç–ª–æ?")
    return BUY_REGION

async def buy_region(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles purchase region input"""
    context.user_data["region"] = update.message.text
    logger.info(f"Got region for purchase: {context.user_data['region']}")
    
    await update.message.reply_text("–Ø–∫–∏–π –±—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 60000-90000 $)")
    return BUY_BUDGET

async def buy_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles purchase budget input and completes purchase request"""
    context.user_data["budget"] = update.message.text
    logger.info(f"Got budget for purchase: {context.user_data['budget']}")
    
    await update.message.reply_text(
        "–î—è–∫—É—î–º–æ! –ú–∏ –ø—ñ–¥–±–µ—Ä–µ–º–æ –¥–ª—è –≤–∞—Å –Ω–∞–π–∫—Ä–∞—â—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ üèòÔ∏è", 
        reply_markup=main_menu
    )

    # Prepare and send message to admin
    msg = (
        "üè° –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–¥–±–∞–Ω–Ω—è –¢–∞—É–Ω—Ö–∞—É—Å–∞:\n"
        f"üë§ –Ü–º'—è: {context.user_data['name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
        f"üìê –ü–ª–æ—â–∞: {context.user_data['area']}\n"
        f"üìç –†–∞–π–æ–Ω: {context.user_data['region']}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {context.user_data['budget']}"
    )
    
    try:
        await context.bot.send_message(chat_id=ADMIN_ID, text=msg)
        logger.info(f"Sent purchase request to admin {ADMIN_ID}")
    except Exception as e:
        logger.error(f"Failed to send message to admin: {e}")
    
    return ConversationHandler.END

# ==== VISUALIZATION HANDLERS ====
async def send_visual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Sends visualization images to the user"""
    logger.info(f"User {update.effective_user.id} requested visualizations")
    
    try:
        # Path to the visualization folder
        folder_path = "data/visualizations"
        
        # –®—É–∫–∞—î–º–æ –ª–∏—à–µ JPEG —Ñ–∞–π–ª–∏, —è–∫—ñ –≤–∏ –Ω–∞–¥–∞–ª–∏
        image_files = [f for f in os.listdir(folder_path) if f.endswith(".jpeg")]
        
        # –Ø–∫—â–æ JPEG-—Ñ–∞–π–ª—ñ–≤ –Ω–µ–º–∞—î, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ SVG (–±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∏)
        if not image_files:
            image_files = [f for f in os.listdir(folder_path) if f.endswith(".svg")]
        
        if image_files:
            # Send message first
            await update.message.reply_text("–û—Å—å –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–∞—à–∏—Ö —Ç–∞—É–Ω—Ö–∞—É—Å—ñ–≤:")
            
            # Send all images
            for image_file in image_files:
                image_path = os.path.join(folder_path, image_file)
                try:
                    # For SVG files, we need to send them as documents because Telegram can't process SVGs as photos
                    if image_file.endswith(".svg"):
                        with open(image_path, "rb") as document:
                            await update.message.reply_document(document, filename=image_file)
                            logger.info(f"Sent visualization as document: {image_file}")
                    else:
                        with open(image_path, "rb") as photo:
                            await update.message.reply_photo(photo)
                            logger.info(f"Sent visualization as photo: {image_file}")
                except Exception as e:
                    logger.error(f"Failed to send image {image_file}: {e}")
                    continue
                    
            # Send final message after all images
            await update.message.reply_text(
                "–Ø–∫—â–æ –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∏—Å—å, –∑–∞–ª–∏—à—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∞–±–æ –ø–æ–∫—É–ø–∫—É!",
                reply_markup=main_menu
            )
        else:
            await update.message.reply_text(
                "–ù–∞ –∂–∞–ª—å, –∑–∞—Ä–∞–∑ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.",
                reply_markup=main_menu
            )
    except FileNotFoundError:
        logger.error(f"Visualization folder not found: {folder_path}")
        await update.message.reply_text(
            "–ù–∞ –∂–∞–ª—å, –∑–∞—Ä–∞–∑ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.",
            reply_markup=main_menu
        )
    except Exception as e:
        logger.error(f"Error sending visualizations: {e}")
        await update.message.reply_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=main_menu
        )

# ==== PRICE CALCULATOR HANDLERS ====
async def calc_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Initiates price calculator conversation"""
    logger.info(f"User {update.effective_user.id} started price calculator")
    
    # Clear any existing data
    context.user_data.clear()
    
    # Create keyboard with area options
    area_keyboard = ReplyKeyboardMarkup([
        ["60-80 –º¬≤", "80-100 –º¬≤"],
        ["100-120 –º¬≤", "120-150 –º¬≤"],
        ["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é"]
    ], resize_keyboard=True)
    
    await update.message.reply_text(
        "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü—ñ–Ω–∏ –Ω–∞ —Ç–∞—É–Ω—Ö–∞—É—Å\n\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω—É –ø–ª–æ—â—É:",
        reply_markup=area_keyboard
    )
    return CALC_AREA

async def calc_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles area selection for price calculator"""
    # If user wants to return to main menu
    if update.message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é":
        await update.message.reply_text("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=main_menu)
        return ConversationHandler.END
    
    # Save selected area
    if "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é" not in update.message.text:
        context.user_data["area"] = update.message.text
        logger.info(f"User selected area: {context.user_data['area']}")
    
    # Create keyboard with room options
    room_keyboard = ReplyKeyboardMarkup([
        ["2 –∫—ñ–º–Ω–∞—Ç–∏", "3 –∫—ñ–º–Ω–∞—Ç–∏"],
        ["4 –∫—ñ–º–Ω–∞—Ç–∏", "5+ –∫—ñ–º–Ω–∞—Ç"],
        ["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é"]
    ], resize_keyboard=True)
    
    await update.message.reply_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç:",
        reply_markup=room_keyboard
    )
    return CALC_ROOMS

async def calc_rooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles room selection for price calculator"""
    # If user wants to return to main menu
    if update.message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é":
        await update.message.reply_text("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=main_menu)
        return ConversationHandler.END
    
    # Save selected rooms
    context.user_data["rooms"] = update.message.text
    logger.info(f"User selected rooms: {context.user_data['rooms']}")
    
    # Create keyboard with location options
    location_keyboard = ReplyKeyboardMarkup([
        ["–ö–∏—ó–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–ü—Ä–∏–º–æ—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω"],
        ["–ú–∞–ª–∏–Ω–æ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–°—É–≤–æ—Ä–æ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω"],
        ["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é"]
    ], resize_keyboard=True)
    
    await update.message.reply_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω –û–¥–µ—Å–∏:",
        reply_markup=location_keyboard
    )
    return CALC_LOCATION

async def calc_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Calculates and displays the estimated price"""
    # If user wants to return to main menu
    if update.message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é":
        await update.message.reply_text("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=main_menu)
        return ConversationHandler.END
    
    # Save selected location
    context.user_data["location"] = update.message.text
    logger.info(f"User selected location: {context.user_data['location']}")
    
    # Calculate base price based on area
    area = context.user_data["area"]
    if area == "60-80 –º¬≤":
        base_price = 60000
    elif area == "80-100 –º¬≤":
        base_price = 80000
    elif area == "100-120 –º¬≤":
        base_price = 100000
    else:  # 120-150 –º¬≤
        base_price = 120000
    
    # Apply room multiplier
    rooms = context.user_data["rooms"]
    if rooms == "2 –∫—ñ–º–Ω–∞—Ç–∏":
        room_multiplier = 1.0
    elif rooms == "3 –∫—ñ–º–Ω–∞—Ç–∏":
        room_multiplier = 1.1
    elif rooms == "4 –∫—ñ–º–Ω–∞—Ç–∏":
        room_multiplier = 1.2
    else:  # 5+ rooms
        room_multiplier = 1.3
    
    # Apply location multiplier
    location = context.user_data["location"]
    if location == "–ö–∏—ó–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω":
        location_multiplier = 1.2
    elif location == "–ü—Ä–∏–º–æ—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω":
        location_multiplier = 1.3
    elif location == "–ú–∞–ª–∏–Ω–æ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω":
        location_multiplier = 1.1
    else:  # –°—É–≤–æ—Ä–æ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω
        location_multiplier = 1.0
    
    # Calculate final price
    final_price = int(base_price * room_multiplier * location_multiplier)
    
    # Format prices for display
    base_price_formatted = "{:,}".format(base_price).replace(",", " ")
    final_price_formatted = "{:,}".format(final_price).replace(",", " ")
    
    # Prepare and send result message
    result_message = (
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ü—ñ–Ω–∏ —Ç–∞—É–Ω—Ö–∞—É—Å—É:\n\n"
        f"üè† –ü–ª–æ—â–∞: {area}\n"
        f"üö™ –ö—ñ–º–Ω–∞—Ç: {rooms}\n"
        f"üìç –†–∞–π–æ–Ω: {location}\n\n"
        f"üíµ –ë–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞: ${base_price_formatted}\n"
        f"üí∞ –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: ${final_price_formatted}\n\n"
        f"‚ö†Ô∏è –¶–µ –ø—Ä–∏–±–ª–∏–∑–Ω–∞ –æ—Ü—ñ–Ω–∫–∞. –î–ª—è —Ç–æ—á–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞–ª–∏—à—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é."
    )
    
    await update.message.reply_text(result_message, reply_markup=main_menu)
    return ConversationHandler.END

# ==== FAQ HANDLERS ====
async def faq_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Shows FAQ categories menu"""
    logger.info(f"User {update.effective_user.id} requested FAQ")
    
    await update.message.reply_text(
        "‚ùì –ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–∏—Ç–∞–Ω–Ω—è:", 
        reply_markup=faq_menu
    )

async def faq_buying_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Shows information about buying process"""
    logger.info(f"User {update.effective_user.id} requested FAQ about buying process")
    
    await update.message.reply_text(
        "üîÑ –ü—Ä–æ—Ü–µ—Å –ø–æ–∫—É–ø–∫–∏ —Ç–∞—É–Ω—Ö–∞—É—Å—É:\n\n"
        "1Ô∏è‚É£ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —Ç–∞ –≤–∏–±—ñ—Ä –æ–±'—î–∫—Ç—É\n"
        "2Ô∏è‚É£ –†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –æ–±'—î–∫—Ç—É (–≤–Ω–µ—Å–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∏)\n"
        "3Ô∏è‚É£ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞ –ø—ñ–¥–ø–∏—Å–∞–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É\n"
        "4Ô∏è‚É£ –û–ø–ª–∞—Ç–∞ –∑–≥—ñ–¥–Ω–æ –∑ –æ–±—Ä–∞–Ω–∏–º –≥—Ä–∞—Ñ—ñ–∫–æ–º\n"
        "5Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—é—á—ñ–≤ —Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤\n\n"
        "–î–ª—è —Å—Ç–∞—Ä—Ç—É –ø—Ä–æ—Ü–µ—Å—É –æ–±–µ—Ä—ñ—Ç—å '–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é' –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.",
        reply_markup=faq_menu
    )

async def faq_payment_terms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Shows information about payment terms"""
    logger.info(f"User {update.effective_user.id} requested FAQ about payment terms")
    
    await update.message.reply_text(
        "üí≥ –£–º–æ–≤–∏ –æ–ø–ª–∞—Ç–∏:\n\n"
        "‚úÖ –ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞: –∑–Ω–∏–∂–∫–∞ 5%\n"
        "‚úÖ –†–æ–∑—Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ 12 –º—ñ—Å—è—Ü—ñ–≤: –ø–µ—Ä—à–∏–π –≤–Ω–µ—Å–æ–∫ 30%\n"
        "‚úÖ –†–æ–∑—Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ 24 –º—ñ—Å—è—Ü—ñ: –ø–µ—Ä—à–∏–π –≤–Ω–µ—Å–æ–∫ 40%\n"
        "‚úÖ –†–æ–∑—Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ 36 –º—ñ—Å—è—Ü—ñ–≤: –ø–µ—Ä—à–∏–π –≤–Ω–µ—Å–æ–∫ 50%\n\n"
        "üí∞ –ú–∏ —Ç–∞–∫–æ–∂ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é—î–º–æ –∑ –±–∞–Ω–∫–∞–º–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —ñ–ø–æ—Ç–µ–∫–∏.\n"
        "üìû –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞–ª–∏—à—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.",
        reply_markup=faq_menu
    )

async def faq_documents(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Shows information about required documents"""
    logger.info(f"User {update.effective_user.id} requested FAQ about documents")
    
    await update.message.reply_text(
        "üìÑ –ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏:\n\n"
        "üë§ –î–ª—è —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è:\n"
        "- –ü–∞—Å–ø–æ—Ä—Ç —Ç–∞ –Ü–ü–ù\n\n"
        "üìù –î–ª—è –ø—ñ–¥–ø–∏—Å–∞–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É:\n"
        "- –ü–∞—Å–ø–æ—Ä—Ç —Ç–∞ –Ü–ü–ù\n"
        "- –î–æ–∫—É–º–µ–Ω—Ç–∏, —â–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—Ç—å —Å—ñ–º–µ–π–Ω–∏–π —Å—Ç–∞–Ω\n\n"
        "üè† –ü—Ä–∏ –ø–µ—Ä–µ–¥–∞—á—ñ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ:\n"
        "- –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤–Ω–∏–π –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –Ω–∞ –ø—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ\n"
        "- –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –ø–∞—Å–ø–æ—Ä—Ç\n"
        "- –ê–∫—Ç –ø—Ä–∏–π–æ–º—É-–ø–µ—Ä–µ–¥–∞—á—ñ",
        reply_markup=faq_menu
    )

async def faq_construction_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Shows information about construction time"""
    logger.info(f"User {update.effective_user.id} requested FAQ about construction time")
    
    await update.message.reply_text(
        "‚è±Ô∏è –¢–µ—Ä–º—ñ–Ω–∏ –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞:\n\n"
        "üèóÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞ —Ç–∞—É–Ω—Ö–∞—É—Å—É - 12-18 –º—ñ—Å—è—Ü—ñ–≤\n\n"
        "üìÖ –ï—Ç–∞–ø–∏ –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞:\n"
        "1. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥—ñ–ª—è–Ω–∫–∏ —Ç–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç: 2-3 –º—ñ—Å—è—Ü—ñ\n"
        "2. –ó–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–æ–±–∫–∏ –±—É–¥–∏–Ω–∫—É: 4-6 –º—ñ—Å—è—Ü—ñ–≤\n"
        "3. –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ç–∞ –∑–æ–≤–Ω—ñ—à–Ω—ñ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó: 2-3 –º—ñ—Å—è—Ü—ñ\n"
        "4. –û–∑–¥–æ–±–ª—é–≤–∞–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏: 4-6 –º—ñ—Å—è—Ü—ñ–≤\n\n"
        "üîç –í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞ —á–µ—Ä–µ–∑ —Ñ–æ—Ç–æ-–∑–≤—ñ—Ç–∏, —è–∫—ñ –º–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—É–±–ª—ñ–∫—É—î–º–æ –≤ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ.",
        reply_markup=faq_menu
    )

async def faq_infrastructure(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Shows information about infrastructure"""
    logger.info(f"User {update.effective_user.id} requested FAQ about infrastructure")
    
    await update.message.reply_text(
        "üèôÔ∏è –Ü–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞—à–∏—Ö –∫–æ–º–ø–ª–µ–∫—Å—ñ–≤:\n\n"
        "‚úÖ –ó–∞–∫—Ä–∏—Ç–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—è –∑ –æ—Ö–æ—Ä–æ–Ω–æ—é —Ç–∞ –≤—ñ–¥–µ–æ–Ω–∞–≥–ª—è–¥–æ–º\n"
        "‚úÖ –ü–∞—Ä–∫—ñ–Ω–≥ –¥–ª—è –º–µ—à–∫–∞–Ω—Ü—ñ–≤ —Ç–∞ –≥–æ—Å—Ç–µ–π\n"
        "‚úÖ –î–∏—Ç—è—á—ñ —Ç–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ñ –º–∞–π–¥–∞–Ω—á–∏–∫–∏\n"
        "‚úÖ –ó–æ–Ω–∏ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É —Ç–∞ –±–∞—Ä–±–µ–∫—é\n"
        "‚úÖ –õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω–∏–π –¥–∏–∑–∞–π–Ω —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó\n\n"
        "üè™ –ü–æ—Ä—É—á –∑ –Ω–∞—à–∏–º–∏ –∫–æ–º–ø–ª–µ–∫—Å–∞–º–∏ –∑–∞–∑–≤–∏—á–∞–π —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω—ñ:\n"
        "- –°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–∏ —Ç–∞ –º–∞–≥–∞–∑–∏–Ω–∏\n"
        "- –®–∫–æ–ª–∏ —Ç–∞ –¥–∏—Ç—è—á—ñ —Å–∞–¥–∫–∏\n"
        "- –ú–µ–¥–∏—á–Ω—ñ –∑–∞–∫–ª–∞–¥–∏\n"
        "- –ó—É–ø–∏–Ω–∫–∏ –≥—Ä–æ–º–∞–¥—Å—å–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É",
        reply_markup=faq_menu
    )

async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Returns to main menu"""
    logger.info(f"User {update.effective_user.id} returned to main menu")
    
    await update.message.reply_text(
        "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        reply_markup=main_menu
    )

# ==== CHANNEL AND COMPANY INFO HANDLERS ====
async def go_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Provides link to company channel"""
    logger.info(f"User {update.effective_user.id} requested channel link")
    
    await update.message.reply_text(
        "–ü–µ—Ä–µ—Ö–æ–¥—å —É –Ω–∞—à –∫–∞–Ω–∞–ª üëâ https://t.me/RCG_nedvigimost",
        reply_markup=main_menu
    )

async def about_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Provides information about the company"""
    logger.info(f"User {update.effective_user.id} requested company info")
    
    await update.message.reply_text(
        "üèò –ú–∏ –±—É–¥—ñ–≤–µ–ª—å–Ω–∞ –∫–æ–º–ø–∞–Ω—ñ—è Realty Consulting Group —â–æ –º–∞—î –±–∞–≥–∞—Ç–æ—Ä—ñ—á–Ω–∏–π –¥–æ—Å–≤—ñ–¥ –≤ –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤—ñ. "
        "–ó –ø–æ—á–∞—Ç–∫—É –ø–æ–≤–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ –≤—Ç–æ—Ä–≥–Ω–µ–Ω–Ω—è –≤–æ—Ä–æ–≥–∞, –º–∏ –ø–æ–±—É–¥—É–≤–∞–ª–∏ –±—ñ–ª—å—à–µ –Ω—ñ–∂ 300 –±—É–¥–∏–Ω–∫—ñ–≤ –≤ –º—ñ—Å—Ç—ñ –û–¥–µ—Å–∞. "
        "–î—è–∫—É—î–º–æ —â–æ –¥–æ–≤—ñ—Ä—è—î—Ç–µ —Ç–∞ –æ–±–∏—Ä–∞—î—Ç–µ —Å–∞–º–µ –Ω–∞—Å.ü§ù\n\n"
        "üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞: +380 93 912 14 14\n"
        "üåê –°–∞–π—Ç: https://rcg-od.mssg.me/\n"
        "üì∏ Instagram: https://www.instagram.com/realty_consulting?igsh=dGVtY3d1NTh2ZWRn&utm_source=qr",
        reply_markup=main_menu
    )

# ==== FALLBACK HANDLER ====
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for unknown messages"""
    logger.info(f"User {update.effective_user.id} sent unknown message: {update.message.text}")
    
    await update.message.reply_text(
        "–ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é üëá",
        reply_markup=main_menu
    )

# ==== MAIN FUNCTION ====
def main():
    """Main function to start the bot"""
    try:
        # Create the application
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        
        # Create conversation handlers
        consult_conv = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex(".*–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.*"), consult_start)],
            states={
                CONSULT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, consult_name)],
                CONSULT_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, consult_phone)],
            },
            fallbacks=[CommandHandler("start", start)]
        )
        
        buy_conv = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex(".*–¢–∞—É–Ω—Ö–∞—É—Å–∞.*"), buy_start)],
            states={
                BUY_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, buy_name)],
                BUY_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, buy_phone)],
                BUY_AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, buy_area)],
                BUY_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND, buy_region)],
                BUY_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, buy_budget)],
            },
            fallbacks=[CommandHandler("start", start)]
        )
        
        # Create calculator conversation handler
        calc_conv = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex(".*–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü—ñ–Ω–∏.*"), calc_start)],
            states={
                CALC_AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, calc_area)],
                CALC_ROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, calc_rooms)],
                CALC_LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, calc_location)],
            },
            fallbacks=[CommandHandler("start", start)]
        )
        
        # Add handlers to the application
        app.add_handler(CommandHandler("start", start))
        app.add_handler(consult_conv)
        app.add_handler(buy_conv)
        app.add_handler(calc_conv)
        app.add_handler(MessageHandler(filters.Regex(".*–≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—é.*"), send_visual))
        app.add_handler(MessageHandler(filters.Regex(".*–ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è.*"), faq_start))
        app.add_handler(MessageHandler(filters.Regex("–ü—Ä–æ—Ü–µ—Å –ø–æ–∫—É–ø–∫–∏"), faq_buying_process))
        app.add_handler(MessageHandler(filters.Regex("–£–º–æ–≤–∏ –æ–ø–ª–∞—Ç–∏"), faq_payment_terms))
        app.add_handler(MessageHandler(filters.Regex("–î–æ–∫—É–º–µ–Ω—Ç–∏"), faq_documents))
        app.add_handler(MessageHandler(filters.Regex("–¢–µ—Ä–º—ñ–Ω–∏ –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞"), faq_construction_time))
        app.add_handler(MessageHandler(filters.Regex("–Ü–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞"), faq_infrastructure))
        app.add_handler(MessageHandler(filters.Regex("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é"), return_to_menu))
        app.add_handler(MessageHandler(filters.Regex(".*–∫–∞–Ω–∞–ª.*"), go_to_channel))
        app.add_handler(MessageHandler(filters.Regex(".*–∫–æ–º–ø–∞–Ω—ñ—é.*"), about_company))
        app.add_handler(MessageHandler(filters.TEXT, unknown))
        
        # Start the bot
        logger.info("‚úÖ Bot is starting...")
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
        
        # Create visualization directory if it doesn't exist
        os.makedirs("data/visualizations", exist_ok=True)
        
        app.run_polling()
        
    except Exception as e:
        logger.error(f"Error starting the bot: {e}")
        print(f"‚ùå Error starting the bot: {e}")

if __name__ == "__main__":
    main()
